// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2024 15:25:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Lab6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab6_vlg_sample_tst(
	CLK,
	IN,
	P11_2,
	P12_3,
	RST0,
	STEP,
	SWA,
	SWB,
	sampler_tx
);
input  CLK;
input [7:0] IN;
input  P11_2;
input  P12_3;
input  RST0;
input  STEP;
input  SWA;
input  SWB;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or IN or P11_2 or P12_3 or RST0 or STEP or SWA or SWB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Lab6_vlg_check_tst (
	BUS,
	LED_B,
	P10_1,
	P36_9,
	P37_10,
	RAM_B,
	SW_B,
	sampler_rx
);
input [7:0] BUS;
input  LED_B;
input  P10_1;
input  P36_9;
input  P37_10;
input  RAM_B;
input  SW_B;
input sampler_rx;

reg [7:0] BUS_expected;
reg  LED_B_expected;
reg  P10_1_expected;
reg  P36_9_expected;
reg  P37_10_expected;
reg  RAM_B_expected;
reg  SW_B_expected;

reg [7:0] BUS_prev;
reg  LED_B_prev;
reg  P10_1_prev;
reg  P36_9_prev;
reg  P37_10_prev;
reg  RAM_B_prev;
reg  SW_B_prev;

reg [7:0] BUS_expected_prev;
reg  LED_B_expected_prev;
reg  P10_1_expected_prev;
reg  P36_9_expected_prev;
reg  P37_10_expected_prev;
reg  RAM_B_expected_prev;
reg  SW_B_expected_prev;

reg [7:0] last_BUS_exp;
reg  last_LED_B_exp;
reg  last_P10_1_exp;
reg  last_P36_9_exp;
reg  last_P37_10_exp;
reg  last_RAM_B_exp;
reg  last_SW_B_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	BUS_prev = BUS;
	LED_B_prev = LED_B;
	P10_1_prev = P10_1;
	P36_9_prev = P36_9;
	P37_10_prev = P37_10;
	RAM_B_prev = RAM_B;
	SW_B_prev = SW_B;
end

// update expected /o prevs

always @(trigger)
begin
	BUS_expected_prev = BUS_expected;
	LED_B_expected_prev = LED_B_expected;
	P10_1_expected_prev = P10_1_expected;
	P36_9_expected_prev = P36_9_expected;
	P37_10_expected_prev = P37_10_expected;
	RAM_B_expected_prev = RAM_B_expected;
	SW_B_expected_prev = SW_B_expected;
end



// expected LED_B
initial
begin
	LED_B_expected = 1'bX;
end 

// expected P10_1
initial
begin
	P10_1_expected = 1'bX;
end 

// expected P36_9
initial
begin
	P36_9_expected = 1'bX;
end 

// expected P37_10
initial
begin
	P37_10_expected = 1'bX;
end 

// expected RAM_B
initial
begin
	RAM_B_expected = 1'bX;
end 

// expected SW_B
initial
begin
	SW_B_expected = 1'bX;
end 
// expected BUS[ 7 ]
initial
begin
	BUS_expected[7] = 1'bX;
end 
// expected BUS[ 6 ]
initial
begin
	BUS_expected[6] = 1'bX;
end 
// expected BUS[ 5 ]
initial
begin
	BUS_expected[5] = 1'bX;
end 
// expected BUS[ 4 ]
initial
begin
	BUS_expected[4] = 1'bX;
end 
// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
end 
// generate trigger
always @(BUS_expected or BUS or LED_B_expected or LED_B or P10_1_expected or P10_1 or P36_9_expected or P36_9 or P37_10_expected or P37_10 or RAM_B_expected or RAM_B or SW_B_expected or SW_B)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BUS = %b | expected LED_B = %b | expected P10_1 = %b | expected P36_9 = %b | expected P37_10 = %b | expected RAM_B = %b | expected SW_B = %b | ",BUS_expected_prev,LED_B_expected_prev,P10_1_expected_prev,P36_9_expected_prev,P37_10_expected_prev,RAM_B_expected_prev,SW_B_expected_prev);
	$display("| real BUS = %b | real LED_B = %b | real P10_1 = %b | real P36_9 = %b | real P37_10 = %b | real RAM_B = %b | real SW_B = %b | ",BUS_prev,LED_B_prev,P10_1_prev,P36_9_prev,P37_10_prev,RAM_B_prev,SW_B_prev);
`endif
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( BUS_expected_prev[4] !== 1'bx ) && ( BUS_prev[4] !== BUS_expected_prev[4] )
		&& ((BUS_expected_prev[4] !== last_BUS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[4] = BUS_expected_prev[4];
	end
	if (
		( BUS_expected_prev[5] !== 1'bx ) && ( BUS_prev[5] !== BUS_expected_prev[5] )
		&& ((BUS_expected_prev[5] !== last_BUS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[5] = BUS_expected_prev[5];
	end
	if (
		( BUS_expected_prev[6] !== 1'bx ) && ( BUS_prev[6] !== BUS_expected_prev[6] )
		&& ((BUS_expected_prev[6] !== last_BUS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[6] = BUS_expected_prev[6];
	end
	if (
		( BUS_expected_prev[7] !== 1'bx ) && ( BUS_prev[7] !== BUS_expected_prev[7] )
		&& ((BUS_expected_prev[7] !== last_BUS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_exp[7] = BUS_expected_prev[7];
	end
	if (
		( LED_B_expected_prev !== 1'bx ) && ( LED_B_prev !== LED_B_expected_prev )
		&& ((LED_B_expected_prev !== last_LED_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_B_expected_prev);
		$display ("     Real value = %b", LED_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_B_exp = LED_B_expected_prev;
	end
	if (
		( P10_1_expected_prev !== 1'bx ) && ( P10_1_prev !== P10_1_expected_prev )
		&& ((P10_1_expected_prev !== last_P10_1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P10_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P10_1_expected_prev);
		$display ("     Real value = %b", P10_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_P10_1_exp = P10_1_expected_prev;
	end
	if (
		( P36_9_expected_prev !== 1'bx ) && ( P36_9_prev !== P36_9_expected_prev )
		&& ((P36_9_expected_prev !== last_P36_9_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P36_9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P36_9_expected_prev);
		$display ("     Real value = %b", P36_9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P36_9_exp = P36_9_expected_prev;
	end
	if (
		( P37_10_expected_prev !== 1'bx ) && ( P37_10_prev !== P37_10_expected_prev )
		&& ((P37_10_expected_prev !== last_P37_10_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P37_10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P37_10_expected_prev);
		$display ("     Real value = %b", P37_10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_P37_10_exp = P37_10_expected_prev;
	end
	if (
		( RAM_B_expected_prev !== 1'bx ) && ( RAM_B_prev !== RAM_B_expected_prev )
		&& ((RAM_B_expected_prev !== last_RAM_B_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_B_expected_prev);
		$display ("     Real value = %b", RAM_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_B_exp = RAM_B_expected_prev;
	end
	if (
		( SW_B_expected_prev !== 1'bx ) && ( SW_B_prev !== SW_B_expected_prev )
		&& ((SW_B_expected_prev !== last_SW_B_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SW_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SW_B_expected_prev);
		$display ("     Real value = %b", SW_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SW_B_exp = SW_B_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Lab6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] IN;
reg P11_2;
reg P12_3;
reg RST0;
reg STEP;
reg SWA;
reg SWB;
// wires                                               
wire [7:0] BUS;
wire LED_B;
wire P10_1;
wire P36_9;
wire P37_10;
wire RAM_B;
wire SW_B;

wire sampler;                             

// assign statements (if any)                          
Lab6 i1 (
// port map - connection between master ports and signals/registers   
	.BUS(BUS),
	.CLK(CLK),
	.IN(IN),
	.LED_B(LED_B),
	.P10_1(P10_1),
	.P11_2(P11_2),
	.P12_3(P12_3),
	.P36_9(P36_9),
	.P37_10(P37_10),
	.RAM_B(RAM_B),
	.RST0(RST0),
	.STEP(STEP),
	.SW_B(SW_B),
	.SWA(SWA),
	.SWB(SWB)
);

// RST0
initial
begin
	RST0 = 1'b1;
	RST0 = #59539 1'b0;
end 

// SWA
initial
begin
	SWA = 1'b1;
	SWA = #676 1'b0;
	SWA = #18268 1'b1;
	SWA = #171056 1'b0;
end 

// SWB
initial
begin
	SWB = 1'b1;
	SWB = #676 1'b0;
	SWB = #16915 1'b1;
	SWB = #172409 1'b0;
end 

// STEP
always
begin
	STEP = 1'b0;
	STEP = #25000 1'b1;
	#25000;
end 
// IN[ 7 ]
initial
begin
	IN[7] = 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #40000 1'b0;
	IN[7] = #40000 1'b1;
	IN[7] = #40000 1'b0;
	IN[7] = #40000 1'b1;
	IN[7] = #40000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #40000 1'b0;
	IN[7] = #100000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #40000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #80000 1'b0;
	IN[7] = #40000 1'b1;
	IN[7] = #120000 1'b0;
	IN[7] = #20000 1'b1;
	IN[7] = #20000 1'b0;
end 
// IN[ 6 ]
initial
begin
	IN[6] = 1'b1;
	IN[6] = #60000 1'b0;
	IN[6] = #80000 1'b1;
	IN[6] = #60000 1'b0;
	IN[6] = #80000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #60000 1'b1;
	IN[6] = #40000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #80000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #40000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #100000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #60000 1'b1;
	IN[6] = #40000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #20000 1'b1;
	IN[6] = #20000 1'b0;
	IN[6] = #20000 1'b1;
end 
// IN[ 5 ]
initial
begin
	IN[5] = 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #40000 1'b1;
	IN[5] = #60000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #40000 1'b0;
	IN[5] = #40000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #80000 1'b0;
	IN[5] = #40000 1'b1;
	IN[5] = #40000 1'b0;
	IN[5] = #40000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #80000 1'b1;
	IN[5] = #80000 1'b0;
	IN[5] = #40000 1'b1;
	IN[5] = #20000 1'b0;
	IN[5] = #20000 1'b1;
	IN[5] = #40000 1'b0;
end 
// IN[ 4 ]
initial
begin
	IN[4] = 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #20000 1'b0;
	IN[4] = #40000 1'b1;
	IN[4] = #20000 1'b0;
	IN[4] = #100000 1'b1;
	IN[4] = #140000 1'b0;
	IN[4] = #60000 1'b1;
	IN[4] = #40000 1'b0;
	IN[4] = #80000 1'b1;
	IN[4] = #20000 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #60000 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #40000 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #40000 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #40000 1'b0;
	IN[4] = #120000 1'b1;
	IN[4] = #20000 1'b0;
	IN[4] = #20000 1'b1;
	IN[4] = #20000 1'b0;
end 
// IN[ 3 ]
initial
begin
	IN[3] = 1'b1;
	IN[3] = #40000 1'b0;
	IN[3] = #40000 1'b1;
	IN[3] = #60000 1'b0;
	IN[3] = #20000 1'b1;
	IN[3] = #60000 1'b0;
	IN[3] = #60000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #60000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #20000 1'b1;
	IN[3] = #40000 1'b0;
	IN[3] = #120000 1'b1;
	IN[3] = #100000 1'b0;
	IN[3] = #20000 1'b1;
	IN[3] = #40000 1'b0;
	IN[3] = #20000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #40000 1'b1;
	IN[3] = #20000 1'b0;
	IN[3] = #60000 1'b1;
	IN[3] = #40000 1'b0;
end 
// IN[ 2 ]
initial
begin
	IN[2] = 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #60000 1'b0;
	IN[2] = #60000 1'b1;
	IN[2] = #40000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #40000 1'b1;
	IN[2] = #80000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #40000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #60000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #40000 1'b1;
	IN[2] = #40000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #40000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #20000 1'b0;
	IN[2] = #20000 1'b1;
	IN[2] = #40000 1'b0;
	IN[2] = #20000 1'b1;
end 
// IN[ 1 ]
initial
begin
	IN[1] = 1'b1;
	IN[1] = #40000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #40000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #20000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #60000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #60000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #40000 1'b0;
	IN[1] = #40000 1'b1;
	IN[1] = #40000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #80000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #60000 1'b0;
	IN[1] = #60000 1'b1;
	IN[1] = #20000 1'b0;
	IN[1] = #40000 1'b1;
	IN[1] = #40000 1'b0;
	IN[1] = #60000 1'b1;
	IN[1] = #20000 1'b0;
	IN[1] = #20000 1'b1;
	IN[1] = #40000 1'b0;
	IN[1] = #40000 1'b1;
	IN[1] = #20000 1'b0;
end 
// IN[ 0 ]
initial
begin
	IN[0] = 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #40000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #80000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #40000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #40000 1'b1;
	IN[0] = #80000 1'b0;
	IN[0] = #140000 1'b1;
	IN[0] = #40000 1'b0;
	IN[0] = #40000 1'b1;
	IN[0] = #60000 1'b0;
	IN[0] = #20000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #40000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #60000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #60000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #20000 1'b1;
	IN[0] = #20000 1'b0;
	IN[0] = #20000 1'b1;
end 

// P11_2
initial
begin
	P11_2 = 1'b0;
	P11_2 = #200000 1'b1;
	P11_2 = #240000 1'b0;
	P11_2 = #280000 1'b1;
	P11_2 = #220000 1'b0;
end 

// P12_3
initial
begin
	P12_3 = 1'b0;
	P12_3 = #440000 1'b1;
	P12_3 = #500000 1'b0;
end 

Lab6_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.IN(IN),
	.P11_2(P11_2),
	.P12_3(P12_3),
	.RST0(RST0),
	.STEP(STEP),
	.SWA(SWA),
	.SWB(SWB),
	.sampler_tx(sampler)
);

Lab6_vlg_check_tst tb_out(
	.BUS(BUS),
	.LED_B(LED_B),
	.P10_1(P10_1),
	.P36_9(P36_9),
	.P37_10(P37_10),
	.RAM_B(RAM_B),
	.SW_B(SW_B),
	.sampler_rx(sampler)
);
endmodule

