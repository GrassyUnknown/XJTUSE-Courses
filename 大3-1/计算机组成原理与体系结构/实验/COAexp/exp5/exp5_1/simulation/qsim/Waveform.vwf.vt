// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2024 03:52:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp51
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp51_vlg_sample_tst(
	CLK,
	FC,
	FZ,
	I,
	P,
	SWA,
	SWB,
	sampler_tx
);
input  CLK;
input  FC;
input  FZ;
input [7:2] I;
input [4:1] P;
input  SWA;
input  SWB;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or FC or FZ or I or P or SWA or SWB)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp51_vlg_check_tst (
	SE,
	sampler_rx
);
input [6:1] SE;
input sampler_rx;

reg [6:1] SE_expected;

reg [6:1] SE_prev;

reg [6:1] SE_expected_prev;

reg [6:1] last_SE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	SE_prev = SE;
end

// update expected /o prevs

always @(trigger)
begin
	SE_expected_prev = SE_expected;
end



// expected SE[5]
initial
begin
	SE_expected[5] = 1'bX;
end 

// expected SE[4]
initial
begin
	SE_expected[4] = 1'bX;
end 

// expected SE[3]
initial
begin
	SE_expected[3] = 1'bX;
end 

// expected SE[2]
initial
begin
	SE_expected[2] = 1'bX;
end 

// expected SE[1]
initial
begin
	SE_expected[1] = 1'bX;
end 

// expected SE[6]
initial
begin
	SE_expected[6] = 1'bX;
end 
// generate trigger
always @(SE_expected or SE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SE = %b | ",SE_expected_prev);
	$display("| real SE = %b | ",SE_prev);
`endif
	if (
		( SE_expected_prev[0] !== 1'bx ) && ( SE_prev[0] !== SE_expected_prev[0] )
		&& ((SE_expected_prev[0] !== last_SE_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SE_expected_prev);
		$display ("     Real value = %b", SE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SE_exp[0] = SE_expected_prev[0];
	end
	if (
		( SE_expected_prev[1] !== 1'bx ) && ( SE_prev[1] !== SE_expected_prev[1] )
		&& ((SE_expected_prev[1] !== last_SE_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SE_expected_prev);
		$display ("     Real value = %b", SE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SE_exp[1] = SE_expected_prev[1];
	end
	if (
		( SE_expected_prev[2] !== 1'bx ) && ( SE_prev[2] !== SE_expected_prev[2] )
		&& ((SE_expected_prev[2] !== last_SE_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SE_expected_prev);
		$display ("     Real value = %b", SE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SE_exp[2] = SE_expected_prev[2];
	end
	if (
		( SE_expected_prev[3] !== 1'bx ) && ( SE_prev[3] !== SE_expected_prev[3] )
		&& ((SE_expected_prev[3] !== last_SE_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SE_expected_prev);
		$display ("     Real value = %b", SE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SE_exp[3] = SE_expected_prev[3];
	end
	if (
		( SE_expected_prev[4] !== 1'bx ) && ( SE_prev[4] !== SE_expected_prev[4] )
		&& ((SE_expected_prev[4] !== last_SE_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SE_expected_prev);
		$display ("     Real value = %b", SE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SE_exp[4] = SE_expected_prev[4];
	end
	if (
		( SE_expected_prev[5] !== 1'bx ) && ( SE_prev[5] !== SE_expected_prev[5] )
		&& ((SE_expected_prev[5] !== last_SE_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SE_expected_prev);
		$display ("     Real value = %b", SE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SE_exp[5] = SE_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module exp51_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg FC;
reg FZ;
reg [7:2] I;
reg [4:1] P;
reg SWA;
reg SWB;
// wires                                               
wire [6:1] SE;

wire sampler;                             

// assign statements (if any)                          
exp51 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.FC(FC),
	.FZ(FZ),
	.I(I),
	.P(P),
	.SE(SE),
	.SWA(SWA),
	.SWB(SWB)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #12500 1'b1;
	#12500;
end 

// FC
initial
begin
	FC = 1'b1;
	FC = #75000 1'b0;
	FC = #25000 1'b1;
	FC = #25000 1'b0;
	FC = #50000 1'b1;
	FC = #25000 1'b0;
	FC = #25000 1'b1;
	FC = #225000 1'b0;
	FC = #75000 1'b1;
	FC = #50000 1'b0;
	FC = #25000 1'b1;
	FC = #25000 1'b0;
	FC = #25000 1'b1;
	FC = #25000 1'b0;
	FC = #50000 1'b1;
	FC = #50000 1'b0;
	FC = #25000 1'b1;
	FC = #75000 1'b0;
	FC = #75000 1'b1;
	FC = #25000 1'b0;
end 

// FZ
initial
begin
	FZ = 1'b0;
	FZ = #50000 1'b1;
	FZ = #25000 1'b0;
	FZ = #75000 1'b1;
	FZ = #100000 1'b0;
	FZ = #25000 1'b1;
	FZ = #25000 1'b0;
	FZ = #50000 1'b1;
	FZ = #75000 1'b0;
	FZ = #50000 1'b1;
	FZ = #75000 1'b0;
	FZ = #50000 1'b1;
	FZ = #100000 1'b0;
	FZ = #25000 1'b1;
	FZ = #25000 1'b0;
	FZ = #25000 1'b1;
	FZ = #25000 1'b0;
	FZ = #25000 1'b1;
	FZ = #50000 1'b0;
	FZ = #50000 1'b1;
	FZ = #50000 1'b0;
end 

// I[5]
initial
begin
	I[5] = 1'b0;
	I[5] = #200000 1'b1;
	I[5] = #50000 1'b0;
	I[5] = #50000 1'b1;
	I[5] = #25000 1'b0;
	I[5] = #25000 1'b1;
	I[5] = #150000 1'b0;
	I[5] = #150000 1'b1;
	I[5] = #50000 1'b0;
	I[5] = #50000 1'b1;
	I[5] = #25000 1'b0;
	I[5] = #25000 1'b1;
	I[5] = #25000 1'b0;
	I[5] = #50000 1'b1;
	I[5] = #25000 1'b0;
	I[5] = #25000 1'b1;
end 

// I[4]
initial
begin
	I[4] = 1'b1;
	I[4] = #50000 1'b0;
	I[4] = #25000 1'b1;
	I[4] = #50000 1'b0;
	I[4] = #25000 1'b1;
	I[4] = #75000 1'b0;
	I[4] = #25000 1'b1;
	I[4] = #50000 1'b0;
	I[4] = #25000 1'b1;
	I[4] = #25000 1'b0;
	I[4] = #25000 1'b1;
	I[4] = #25000 1'b0;
	I[4] = #75000 1'b1;
	I[4] = #150000 1'b0;
	I[4] = #50000 1'b1;
	I[4] = #25000 1'b0;
	I[4] = #50000 1'b1;
	I[4] = #50000 1'b0;
	I[4] = #25000 1'b1;
	I[4] = #25000 1'b0;
	I[4] = #50000 1'b1;
	I[4] = #25000 1'b0;
	I[4] = #25000 1'b1;
end 

// I[3]
initial
begin
	I[3] = 1'b1;
	I[3] = #25000 1'b0;
	I[3] = #25000 1'b1;
	I[3] = #50000 1'b0;
	I[3] = #25000 1'b1;
	I[3] = #75000 1'b0;
	I[3] = #25000 1'b1;
	I[3] = #125000 1'b0;
	I[3] = #50000 1'b1;
	I[3] = #25000 1'b0;
	I[3] = #25000 1'b1;
	I[3] = #25000 1'b0;
	I[3] = #25000 1'b1;
	I[3] = #25000 1'b0;
	I[3] = #225000 1'b1;
	I[3] = #150000 1'b0;
	I[3] = #50000 1'b1;
	I[3] = #25000 1'b0;
end 

// I[2]
initial
begin
	I[2] = 1'b1;
	I[2] = #25000 1'b0;
	I[2] = #75000 1'b1;
	I[2] = #25000 1'b0;
	I[2] = #25000 1'b1;
	I[2] = #50000 1'b0;
	I[2] = #50000 1'b1;
	I[2] = #25000 1'b0;
	I[2] = #25000 1'b1;
	I[2] = #25000 1'b0;
	I[2] = #25000 1'b1;
	I[2] = #50000 1'b0;
	I[2] = #75000 1'b1;
	I[2] = #50000 1'b0;
	I[2] = #150000 1'b1;
	I[2] = #75000 1'b0;
	I[2] = #75000 1'b1;
	I[2] = #75000 1'b0;
	I[2] = #75000 1'b1;
end 

// I[6]
initial
begin
	I[6] = 1'b1;
	I[6] = #25000 1'b0;
	I[6] = #75000 1'b1;
	I[6] = #25000 1'b0;
	I[6] = #75000 1'b1;
	I[6] = #150000 1'b0;
	I[6] = #50000 1'b1;
	I[6] = #25000 1'b0;
	I[6] = #25000 1'b1;
	I[6] = #75000 1'b0;
	I[6] = #25000 1'b1;
	I[6] = #50000 1'b0;
	I[6] = #125000 1'b1;
	I[6] = #25000 1'b0;
	I[6] = #25000 1'b1;
	I[6] = #25000 1'b0;
	I[6] = #25000 1'b1;
	I[6] = #50000 1'b0;
	I[6] = #25000 1'b1;
	I[6] = #75000 1'b0;
end 

// I[7]
initial
begin
	I[7] = 1'b0;
	I[7] = #50000 1'b1;
	I[7] = #50000 1'b0;
	I[7] = #100000 1'b1;
	I[7] = #25000 1'b0;
	I[7] = #25000 1'b1;
	I[7] = #25000 1'b0;
	I[7] = #100000 1'b1;
	I[7] = #125000 1'b0;
	I[7] = #25000 1'b1;
	I[7] = #75000 1'b0;
	I[7] = #25000 1'b1;
	I[7] = #25000 1'b0;
	I[7] = #50000 1'b1;
	I[7] = #25000 1'b0;
	I[7] = #25000 1'b1;
	I[7] = #25000 1'b0;
	I[7] = #25000 1'b1;
	I[7] = #25000 1'b0;
	I[7] = #75000 1'b1;
end 

// P[3]
initial
begin
	P[3] = 1'b1;
	P[3] = #50000 1'b0;
	P[3] = #25000 1'b1;
	P[3] = #25000 1'b0;
	P[3] = #25000 1'b1;
	P[3] = #25000 1'b0;
	P[3] = #50000 1'b1;
	P[3] = #100000 1'b0;
	P[3] = #25000 1'b1;
	P[3] = #25000 1'b0;
	P[3] = #25000 1'b1;
	P[3] = #25000 1'b0;
	P[3] = #25000 1'b1;
	P[3] = #100000 1'b0;
	P[3] = #50000 1'b1;
	P[3] = #25000 1'b0;
	P[3] = #50000 1'b1;
	P[3] = #25000 1'b0;
	P[3] = #50000 1'b1;
	P[3] = #50000 1'b0;
	P[3] = #125000 1'b1;
	P[3] = #50000 1'b0;
end 

// P[2]
initial
begin
	P[2] = 1'b1;
	P[2] = #25000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #50000 1'b0;
	P[2] = #125000 1'b1;
	P[2] = #25000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #50000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #25000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #25000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #50000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #50000 1'b0;
	P[2] = #125000 1'b1;
	P[2] = #25000 1'b0;
	P[2] = #25000 1'b1;
	P[2] = #25000 1'b0;
	P[2] = #50000 1'b1;
end 

// P[1]
initial
begin
	P[1] = 1'b1;
	P[1] = #75000 1'b0;
	P[1] = #50000 1'b1;
	P[1] = #25000 1'b0;
	P[1] = #125000 1'b1;
	P[1] = #25000 1'b0;
	P[1] = #50000 1'b1;
	P[1] = #25000 1'b0;
	P[1] = #25000 1'b1;
	P[1] = #25000 1'b0;
	P[1] = #75000 1'b1;
	P[1] = #25000 1'b0;
	P[1] = #75000 1'b1;
	P[1] = #75000 1'b0;
	P[1] = #50000 1'b1;
	P[1] = #50000 1'b0;
	P[1] = #25000 1'b1;
	P[1] = #25000 1'b0;
	P[1] = #50000 1'b1;
	P[1] = #50000 1'b0;
	P[1] = #50000 1'b1;
end 

// P[4]
initial
begin
	P[4] = 1'b1;
	P[4] = #75000 1'b0;
	P[4] = #25000 1'b1;
	P[4] = #25000 1'b0;
	P[4] = #25000 1'b1;
	P[4] = #100000 1'b0;
	P[4] = #75000 1'b1;
	P[4] = #125000 1'b0;
	P[4] = #150000 1'b1;
	P[4] = #25000 1'b0;
	P[4] = #50000 1'b1;
	P[4] = #25000 1'b0;
	P[4] = #25000 1'b1;
	P[4] = #25000 1'b0;
	P[4] = #25000 1'b1;
	P[4] = #50000 1'b0;
	P[4] = #125000 1'b1;
end 

// SWA
initial
begin
	SWA = 1'b0;
	SWA = #75000 1'b1;
	SWA = #25000 1'b0;
	SWA = #25000 1'b1;
	SWA = #25000 1'b0;
	SWA = #50000 1'b1;
	SWA = #25000 1'b0;
	SWA = #100000 1'b1;
	SWA = #75000 1'b0;
	SWA = #50000 1'b1;
	SWA = #25000 1'b0;
	SWA = #25000 1'b1;
	SWA = #50000 1'b0;
	SWA = #125000 1'b1;
	SWA = #25000 1'b0;
	SWA = #150000 1'b1;
	SWA = #25000 1'b0;
	SWA = #25000 1'b1;
	SWA = #25000 1'b0;
	SWA = #25000 1'b1;
	SWA = #25000 1'b0;
end 

// SWB
initial
begin
	SWB = 1'b0;
	SWB = #50000 1'b1;
	SWB = #100000 1'b0;
	SWB = #50000 1'b1;
	SWB = #25000 1'b0;
	SWB = #25000 1'b1;
	SWB = #25000 1'b0;
	SWB = #25000 1'b1;
	SWB = #50000 1'b0;
	SWB = #75000 1'b1;
	SWB = #25000 1'b0;
	SWB = #25000 1'b1;
	SWB = #25000 1'b0;
	SWB = #25000 1'b1;
	SWB = #100000 1'b0;
	SWB = #25000 1'b1;
	SWB = #25000 1'b0;
	SWB = #100000 1'b1;
	SWB = #25000 1'b0;
	SWB = #50000 1'b1;
	SWB = #75000 1'b0;
	SWB = #25000 1'b1;
end 

exp51_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.FC(FC),
	.FZ(FZ),
	.I(I),
	.P(P),
	.SWA(SWA),
	.SWB(SWB),
	.sampler_tx(sampler)
);

exp51_vlg_check_tst tb_out(
	.SE(SE),
	.sampler_rx(sampler)
);
endmodule

