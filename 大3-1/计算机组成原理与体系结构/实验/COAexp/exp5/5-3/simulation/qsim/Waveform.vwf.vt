// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2024 04:03:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LDR0_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LDR0_2_vlg_sample_tst(
	I0,
	I1,
	I2,
	I3,
	LDRI,
	RD_B,
	RJ_B,
	RS_B,
	sampler_tx
);
input  I0;
input  I1;
input  I2;
input  I3;
input  LDRI;
input  RD_B;
input  RJ_B;
input  RS_B;
output sampler_tx;

reg sample;
time current_time;
always @(I0 or I1 or I2 or I3 or LDRI or RD_B or RJ_B or RS_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LDR0_2_vlg_check_tst (
	LDR0,
	LDR1,
	LDR2,
	R0_B,
	R1_B,
	R2_B,
	sampler_rx
);
input  LDR0;
input  LDR1;
input  LDR2;
input  R0_B;
input  R1_B;
input  R2_B;
input sampler_rx;

reg  LDR0_expected;
reg  LDR1_expected;
reg  LDR2_expected;
reg  R0_B_expected;
reg  R1_B_expected;
reg  R2_B_expected;

reg  LDR0_prev;
reg  LDR1_prev;
reg  LDR2_prev;
reg  R0_B_prev;
reg  R1_B_prev;
reg  R2_B_prev;

reg  LDR0_expected_prev;
reg  LDR1_expected_prev;
reg  LDR2_expected_prev;
reg  R0_B_expected_prev;
reg  R1_B_expected_prev;
reg  R2_B_expected_prev;

reg  last_LDR0_exp;
reg  last_LDR1_exp;
reg  last_LDR2_exp;
reg  last_R0_B_exp;
reg  last_R1_B_exp;
reg  last_R2_B_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	LDR0_prev = LDR0;
	LDR1_prev = LDR1;
	LDR2_prev = LDR2;
	R0_B_prev = R0_B;
	R1_B_prev = R1_B;
	R2_B_prev = R2_B;
end

// update expected /o prevs

always @(trigger)
begin
	LDR0_expected_prev = LDR0_expected;
	LDR1_expected_prev = LDR1_expected;
	LDR2_expected_prev = LDR2_expected;
	R0_B_expected_prev = R0_B_expected;
	R1_B_expected_prev = R1_B_expected;
	R2_B_expected_prev = R2_B_expected;
end



// expected LDR0
initial
begin
	LDR0_expected = 1'bX;
end 

// expected LDR1
initial
begin
	LDR1_expected = 1'bX;
end 

// expected LDR2
initial
begin
	LDR2_expected = 1'bX;
end 

// expected R0_B
initial
begin
	R0_B_expected = 1'bX;
end 

// expected R1_B
initial
begin
	R1_B_expected = 1'bX;
end 

// expected R2_B
initial
begin
	R2_B_expected = 1'bX;
end 
// generate trigger
always @(LDR0_expected or LDR0 or LDR1_expected or LDR1 or LDR2_expected or LDR2 or R0_B_expected or R0_B or R1_B_expected or R1_B or R2_B_expected or R2_B)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LDR0 = %b | expected LDR1 = %b | expected LDR2 = %b | expected R0_B = %b | expected R1_B = %b | expected R2_B = %b | ",LDR0_expected_prev,LDR1_expected_prev,LDR2_expected_prev,R0_B_expected_prev,R1_B_expected_prev,R2_B_expected_prev);
	$display("| real LDR0 = %b | real LDR1 = %b | real LDR2 = %b | real R0_B = %b | real R1_B = %b | real R2_B = %b | ",LDR0_prev,LDR1_prev,LDR2_prev,R0_B_prev,R1_B_prev,R2_B_prev);
`endif
	if (
		( LDR0_expected_prev !== 1'bx ) && ( LDR0_prev !== LDR0_expected_prev )
		&& ((LDR0_expected_prev !== last_LDR0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDR0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDR0_expected_prev);
		$display ("     Real value = %b", LDR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LDR0_exp = LDR0_expected_prev;
	end
	if (
		( LDR1_expected_prev !== 1'bx ) && ( LDR1_prev !== LDR1_expected_prev )
		&& ((LDR1_expected_prev !== last_LDR1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDR1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDR1_expected_prev);
		$display ("     Real value = %b", LDR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LDR1_exp = LDR1_expected_prev;
	end
	if (
		( LDR2_expected_prev !== 1'bx ) && ( LDR2_prev !== LDR2_expected_prev )
		&& ((LDR2_expected_prev !== last_LDR2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDR2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDR2_expected_prev);
		$display ("     Real value = %b", LDR2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LDR2_exp = LDR2_expected_prev;
	end
	if (
		( R0_B_expected_prev !== 1'bx ) && ( R0_B_prev !== R0_B_expected_prev )
		&& ((R0_B_expected_prev !== last_R0_B_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_B_expected_prev);
		$display ("     Real value = %b", R0_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_R0_B_exp = R0_B_expected_prev;
	end
	if (
		( R1_B_expected_prev !== 1'bx ) && ( R1_B_prev !== R1_B_expected_prev )
		&& ((R1_B_expected_prev !== last_R1_B_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_B_expected_prev);
		$display ("     Real value = %b", R1_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_B_exp = R1_B_expected_prev;
	end
	if (
		( R2_B_expected_prev !== 1'bx ) && ( R2_B_prev !== R2_B_expected_prev )
		&& ((R2_B_expected_prev !== last_R2_B_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_B_expected_prev);
		$display ("     Real value = %b", R2_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_B_exp = R2_B_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LDR0_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg I0;
reg I1;
reg I2;
reg I3;
reg LDRI;
reg RD_B;
reg RJ_B;
reg RS_B;
// wires                                               
wire LDR0;
wire LDR1;
wire LDR2;
wire R0_B;
wire R1_B;
wire R2_B;

wire sampler;                             

// assign statements (if any)                          
LDR0_2 i1 (
// port map - connection between master ports and signals/registers   
	.I0(I0),
	.I1(I1),
	.I2(I2),
	.I3(I3),
	.LDR0(LDR0),
	.LDR1(LDR1),
	.LDR2(LDR2),
	.LDRI(LDRI),
	.R0_B(R0_B),
	.R1_B(R1_B),
	.R2_B(R2_B),
	.RD_B(RD_B),
	.RJ_B(RJ_B),
	.RS_B(RS_B)
);

// I0
initial
begin
	I0 = 1'b1;
	I0 = #50000 1'b0;
	I0 = #50000 1'b1;
	I0 = #25000 1'b0;
	I0 = #50000 1'b1;
	I0 = #75000 1'b0;
	I0 = #75000 1'b1;
	I0 = #50000 1'b0;
	I0 = #50000 1'b1;
	I0 = #100000 1'b0;
	I0 = #25000 1'b1;
	I0 = #50000 1'b0;
	I0 = #25000 1'b1;
	I0 = #25000 1'b0;
	I0 = #25000 1'b1;
	I0 = #25000 1'b0;
	I0 = #75000 1'b1;
	I0 = #50000 1'b0;
	I0 = #25000 1'b1;
	I0 = #75000 1'b0;
	I0 = #50000 1'b1;
end 

// I1
initial
begin
	I1 = 1'b0;
	I1 = #25000 1'b1;
	I1 = #50000 1'b0;
	I1 = #25000 1'b1;
	I1 = #100000 1'b0;
	I1 = #100000 1'b1;
	I1 = #50000 1'b0;
	I1 = #25000 1'b1;
	I1 = #50000 1'b0;
	I1 = #75000 1'b1;
	I1 = #25000 1'b0;
	I1 = #50000 1'b1;
	I1 = #75000 1'b0;
	I1 = #25000 1'b1;
	I1 = #50000 1'b0;
	I1 = #25000 1'b1;
	I1 = #50000 1'b0;
	I1 = #150000 1'b1;
	I1 = #25000 1'b0;
end 

// I2
initial
begin
	I2 = 1'b0;
	I2 = #25000 1'b1;
	I2 = #50000 1'b0;
	I2 = #25000 1'b1;
	I2 = #100000 1'b0;
	I2 = #100000 1'b1;
	I2 = #50000 1'b0;
	I2 = #25000 1'b1;
	I2 = #50000 1'b0;
	I2 = #75000 1'b1;
	I2 = #25000 1'b0;
	I2 = #50000 1'b1;
	I2 = #75000 1'b0;
	I2 = #25000 1'b1;
	I2 = #50000 1'b0;
	I2 = #25000 1'b1;
	I2 = #50000 1'b0;
	I2 = #150000 1'b1;
	I2 = #25000 1'b0;
end 

// I3
initial
begin
	I3 = 1'b0;
	I3 = #50000 1'b1;
	I3 = #25000 1'b0;
	I3 = #75000 1'b1;
	I3 = #75000 1'b0;
	I3 = #150000 1'b1;
	I3 = #50000 1'b0;
	I3 = #50000 1'b1;
	I3 = #50000 1'b0;
	I3 = #50000 1'b1;
	I3 = #50000 1'b0;
	I3 = #125000 1'b1;
	I3 = #25000 1'b0;
	I3 = #25000 1'b1;
	I3 = #25000 1'b0;
	I3 = #125000 1'b1;
end 

// LDRI
initial
begin
	LDRI = 1'b1;
	LDRI = #75000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #25000 1'b0;
	LDRI = #50000 1'b1;
	LDRI = #100000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #25000 1'b0;
	LDRI = #75000 1'b1;
	LDRI = #50000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #25000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #75000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #25000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #75000 1'b0;
	LDRI = #25000 1'b1;
	LDRI = #50000 1'b0;
	LDRI = #50000 1'b1;
end 

// RD_B
initial
begin
	RD_B = 1'b1;
	RD_B = #25000 1'b0;
	RD_B = #50000 1'b1;
	RD_B = #100000 1'b0;
	RD_B = #25000 1'b1;
	RD_B = #25000 1'b0;
	RD_B = #25000 1'b1;
	RD_B = #125000 1'b0;
	RD_B = #150000 1'b1;
	RD_B = #50000 1'b0;
	RD_B = #25000 1'b1;
	RD_B = #25000 1'b0;
	RD_B = #25000 1'b1;
	RD_B = #50000 1'b0;
	RD_B = #25000 1'b1;
	RD_B = #50000 1'b0;
	RD_B = #125000 1'b1;
	RD_B = #75000 1'b0;
end 

// RJ_B
initial
begin
	RJ_B = 1'b0;
	RJ_B = #100000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #25000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #50000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #25000 1'b1;
	RJ_B = #50000 1'b0;
	RJ_B = #25000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #25000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #50000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #25000 1'b1;
	RJ_B = #50000 1'b0;
	RJ_B = #50000 1'b1;
	RJ_B = #125000 1'b0;
	RJ_B = #50000 1'b1;
	RJ_B = #25000 1'b0;
	RJ_B = #125000 1'b1;
end 

// RS_B
initial
begin
	RS_B = 1'b1;
	RS_B = #50000 1'b0;
	RS_B = #100000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #25000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #100000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #50000 1'b1;
	RS_B = #50000 1'b0;
	RS_B = #75000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #100000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #50000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #25000 1'b1;
	RS_B = #75000 1'b0;
	RS_B = #75000 1'b1;
	RS_B = #25000 1'b0;
	RS_B = #25000 1'b1;
end 

LDR0_2_vlg_sample_tst tb_sample (
	.I0(I0),
	.I1(I1),
	.I2(I2),
	.I3(I3),
	.LDRI(LDRI),
	.RD_B(RD_B),
	.RJ_B(RJ_B),
	.RS_B(RS_B),
	.sampler_tx(sampler)
);

LDR0_2_vlg_check_tst tb_out(
	.LDR0(LDR0),
	.LDR1(LDR1),
	.LDR2(LDR2),
	.R0_B(R0_B),
	.R1_B(R1_B),
	.R2_B(R2_B),
	.sampler_rx(sampler)
);
endmodule

