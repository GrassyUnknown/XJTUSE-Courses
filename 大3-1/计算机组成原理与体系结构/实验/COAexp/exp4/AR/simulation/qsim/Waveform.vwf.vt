// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/05/2024 02:41:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AR_vlg_sample_tst(
	ar_alk,
	data,
	input_b,
	load_pc,
	pc_b,
	pc_clk,
	rst,
	sampler_tx
);
input  ar_alk;
input [7:0] data;
input  input_b;
input  load_pc;
input  pc_b;
input  pc_clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(ar_alk or data or input_b or load_pc or pc_b or pc_clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AR_vlg_check_tst (
	ar,
	pc,
	sampler_rx
);
input [7:0] ar;
input [7:0] pc;
input sampler_rx;

reg [7:0] ar_expected;
reg [7:0] pc_expected;

reg [7:0] ar_prev;
reg [7:0] pc_prev;

reg [7:0] ar_expected_prev;
reg [7:0] pc_expected_prev;

reg [7:0] last_ar_exp;
reg [7:0] last_pc_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ar_prev = ar;
	pc_prev = pc;
end

// update expected /o prevs

always @(trigger)
begin
	ar_expected_prev = ar_expected;
	pc_expected_prev = pc_expected;
end


// expected ar[ 7 ]
initial
begin
	ar_expected[7] = 1'bX;
end 
// expected ar[ 6 ]
initial
begin
	ar_expected[6] = 1'bX;
end 
// expected ar[ 5 ]
initial
begin
	ar_expected[5] = 1'bX;
end 
// expected ar[ 4 ]
initial
begin
	ar_expected[4] = 1'bX;
end 
// expected ar[ 3 ]
initial
begin
	ar_expected[3] = 1'bX;
end 
// expected ar[ 2 ]
initial
begin
	ar_expected[2] = 1'bX;
end 
// expected ar[ 1 ]
initial
begin
	ar_expected[1] = 1'bX;
end 
// expected ar[ 0 ]
initial
begin
	ar_expected[0] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// generate trigger
always @(ar_expected or ar or pc_expected or pc)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ar = %b | expected pc = %b | ",ar_expected_prev,pc_expected_prev);
	$display("| real ar = %b | real pc = %b | ",ar_prev,pc_prev);
`endif
	if (
		( ar_expected_prev[0] !== 1'bx ) && ( ar_prev[0] !== ar_expected_prev[0] )
		&& ((ar_expected_prev[0] !== last_ar_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[0] = ar_expected_prev[0];
	end
	if (
		( ar_expected_prev[1] !== 1'bx ) && ( ar_prev[1] !== ar_expected_prev[1] )
		&& ((ar_expected_prev[1] !== last_ar_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[1] = ar_expected_prev[1];
	end
	if (
		( ar_expected_prev[2] !== 1'bx ) && ( ar_prev[2] !== ar_expected_prev[2] )
		&& ((ar_expected_prev[2] !== last_ar_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[2] = ar_expected_prev[2];
	end
	if (
		( ar_expected_prev[3] !== 1'bx ) && ( ar_prev[3] !== ar_expected_prev[3] )
		&& ((ar_expected_prev[3] !== last_ar_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[3] = ar_expected_prev[3];
	end
	if (
		( ar_expected_prev[4] !== 1'bx ) && ( ar_prev[4] !== ar_expected_prev[4] )
		&& ((ar_expected_prev[4] !== last_ar_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[4] = ar_expected_prev[4];
	end
	if (
		( ar_expected_prev[5] !== 1'bx ) && ( ar_prev[5] !== ar_expected_prev[5] )
		&& ((ar_expected_prev[5] !== last_ar_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[5] = ar_expected_prev[5];
	end
	if (
		( ar_expected_prev[6] !== 1'bx ) && ( ar_prev[6] !== ar_expected_prev[6] )
		&& ((ar_expected_prev[6] !== last_ar_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[6] = ar_expected_prev[6];
	end
	if (
		( ar_expected_prev[7] !== 1'bx ) && ( ar_prev[7] !== ar_expected_prev[7] )
		&& ((ar_expected_prev[7] !== last_ar_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ar[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ar_expected_prev);
		$display ("     Real value = %b", ar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ar_exp[7] = ar_expected_prev[7];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ar_alk;
reg [7:0] data;
reg input_b;
reg load_pc;
reg pc_b;
reg pc_clk;
reg rst;
// wires                                               
wire [7:0] ar;
wire [7:0] pc;

wire sampler;                             

// assign statements (if any)                          
AR i1 (
// port map - connection between master ports and signals/registers   
	.ar(ar),
	.ar_alk(ar_alk),
	.data(data),
	.input_b(input_b),
	.load_pc(load_pc),
	.pc(pc),
	.pc_b(pc_b),
	.pc_clk(pc_clk),
	.rst(rst)
);

// ar_alk
initial
begin
	ar_alk = 1'b0;
	ar_alk = #120000 1'b1;
	ar_alk = #470000 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b1;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
	data[4] = #800000 1'b1;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
	data[3] = #400000 1'b1;
	data[3] = #400000 1'b0;
end 
// data[ 2 ]
initial
begin
	repeat(2)
	begin
		data[2] = 1'b0;
		data[2] = #200000 1'b1;
		# 200000;
	end
	data[2] = 1'b0;
end 
// data[ 1 ]
always
begin
	data[1] = 1'b0;
	data[1] = #100000 1'b1;
	#100000;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b1;
end 

// input_b
initial
begin
	input_b = 1'b0;
	input_b = #170000 1'b1;
	input_b = #70000 1'b0;
end 

// load_pc
initial
begin
	load_pc = 1'b0;
	load_pc = #270000 1'b1;
	load_pc = #90000 1'b0;
end 

// pc_b
initial
begin
	pc_b = 1'b0;
	pc_b = #160000 1'b1;
	pc_b = #80000 1'b0;
end 

// pc_clk
always
begin
	pc_clk = 1'b0;
	pc_clk = #12500 1'b1;
	#12500;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #40000 1'b1;
	rst = #40000 1'b0;
end 

AR_vlg_sample_tst tb_sample (
	.ar_alk(ar_alk),
	.data(data),
	.input_b(input_b),
	.load_pc(load_pc),
	.pc_b(pc_b),
	.pc_clk(pc_clk),
	.rst(rst),
	.sampler_tx(sampler)
);

AR_vlg_check_tst tb_out(
	.ar(ar),
	.pc(pc),
	.sampler_rx(sampler)
);
endmodule

